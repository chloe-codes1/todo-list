{"version":3,"sources":["components/TodoListTemplate.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","components/Palette.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","form","palette","children","className","Form","value","onChange","onCreate","onKeyPress","color","style","onClick","TodoItem","nextProps","nextState","this","props","checked","text","id","onToggle","onRemove","console","log","e","stopPropagation","classnames","Component","TodoItemList","todos","todoList","map","key","Color","active","background","Palette","colors","selected","onSelect","colorList","App","state","input","handleChange","setState","target","handleCreate","concat","handleKeyPress","keyCode","handleToggle","index","findIndex","todo","nextTodos","handleRemove","filter","handleSelectColor","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7694ca77.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoListTemplate.css';\n\n// [ 함수형 component ]\nconst TodoListTemplate=({form, palette, children}) => {\n                        // -> 비구조화 할당\n    return (\n        <main className=\"todo-list-template\">\n            <div className=\"title\">\n                To-Do List\n            </div>\n            <section className=\"palette-wrapper\">\n                {palette}\n            </section>\n            <section className=\"form-wrapper\">\n                {form}\n            </section>\n            <section className=\"todo-wrapper\">\n                {children}\n            </section>\n\n        </main>\n    )\n}\n\nexport default TodoListTemplate;","import React from 'react';\nimport './Form.css';\n\nconst Form = ({value, onChange, onCreate, onKeyPress, color}) => {\n    return (\n        <div className=\"form\">\n            <input value={value}\n                   onChange={onChange}\n                   onKeyPress={onKeyPress}\n                   style={{color}}/>\n            <button className=\"create-button\" onClick={onCreate}>Add</button> \n        </div>\n    );\n};\n\nexport default Form;","import React, { Component } from \"react\";\nimport classnames from 'classnames';\n      // -> yarn add classnames\nimport \"./TodoItem.css\";\n\nclass TodoItem extends Component {\n\n  shouldComponentUpdate(nextProps, nextState){\n    return this.props.checked !== nextProps.checked;\n  }\n\n  render() {\n    const { text, checked, id, onToggle, onRemove, color } = this.props;\n        //-> todo 내용, check box 상태, todo 고유아이디, check box 끄고 키기, 아이템 삭제\n    \n    console.log(id);\n        return (\n      <div className=\"todo-item\" onClick={() => onToggle(id)}>\n        <div\n          className=\"remove\"\n          onClick={e => {\n            e.stopPropagation();\n            // -> onToggle 이 실행되지 않도록 함\n            //    => 이벤트의 확산을 멈춰줌\n            //       -> 부모 이벤트까지 전달되지 않도록 막아주는 역할\n            onRemove(id);\n          }}\n        >\n          &times;\n        </div>\n        <div style={{color}} className={ classnames('todo-text', {checked})} >\n          <div> {text}</div>\n        </div>\n          {\n              checked && (<div className=\"check-mark\"> &#x2713;</div>)\n          }\n\n      </div>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React, {Component} from 'react';\nimport TodoItem from './TodoItem';\n\nclass TodoItemList extends Component{\n\nshouldComponentUpdate(nextProps, nextState){\n    return this.props.todos !== nextProps.todos;\n}\n\n\n    render() {\n        const {todos, onToggle, onRemove} = this.props;\n            //-> 객체들 들어있는 배열 , 체크박스 끄고 키기, 아이템 삭제 함수\n      \n        const todoList = todos.map (\n            ({id, text, checked, color}) => (\n                <TodoItem\n                    id={id}\n                    text={text}\n                    checked={checked}\n                    color={color}\n                    onToggle={onToggle}\n                    onRemove={onRemove}\n                    key={id}\n                    />\n            )\n        );\n            return (\n\n            <div>\n                {todoList}\n            </div>\n        );\n    }\n}\n\nexport default TodoItemList;","import React from \"react\";\nimport \"./Palette.css\";\n\nconst Color = ({ color, active, onClick }) => {\n  return (\n    <div\n      className={`color ${active && \"active\"}`}\n      style={{ background: color }}\n      onClick={onClick}\n    ></div>\n  );\n};\n\nconst Palette = ({ colors, selected, onSelect }) => {\n  const colorList = colors.map(color => (\n    <Color\n      color={color}\n      active={selected === color}\n      onClick={() => onSelect(color)}\n      key={color}\n    />\n  ));\n  return <div className=\"palette\">{colorList}</div>;\n};\n\nexport default Palette;\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoListTemplate from \"./components/TodoListTemplate\";\nimport Form from \"./components/Form\";\nimport TodoItemList from \"./components/TodoItemList\";\nimport Palette from \"./components/Palette\";\n\n\nconst colors = ['#343a40', '#f03e3e','#12b886', '#228ae6'];\n\nclass App extends React.Component {\n\n  id = 3\n\n  state = {\n    input: '',\n    todos: [\n      { id: 0, text: \"Study React\", checked: true},\n      { id: 1, text: \"Finalize Sequence Diagram\", checked: false},\n      { id: 2, text: \"Read 'Dive into Deep Learning'\", checked: false}\n    ],\n    color: '#343a40'\n  }\n\n  // text 내용 바뀌면 state update\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value\n    });\n  }\n  // button click 시 새로운 todo 생성 후 todos update\n  handleCreate = () => {\n    const { input, todos, color } = this.state;\n    this.setState({\n      //input창 비우고\n      input: '',\n      //concat 사용하여 배열에 추가하기\n      todos: todos.concat({\n        id: this.id++,\n        text: input,\n        checked:false,\n        color: color\n      })\n    });\n  }\n\n  // input에서 enter 누르면 button click 한 것과 동일한 작업 진행하기\n  handleKeyPress = (e) => {\n    // 눌려진 키가 Enter면 handleCreate() 호출\n    if(e.keyCode === 28) {\n      console.log(\"enter\")\n      this.handleCreate();\n    }\n  }\n\n  // check 하거나 푸는 함수\n  handleToggle = (id) => {\n    const {todos} = this.state;\n\n    //parameter로 받은 id로 몇 번째 item 인지 찾기\n    const index = todos.findIndex(todo => todo.id === id);\n    \n    //선택한 객체\n    const selected = todos[index];\n\n    //배열을 복사\n    const nextTodos = [...todos];\n  \n    //기존 data를 복사하고, checked 를 덮어쓰기\n    nextTodos[index] = {\n      ...selected,\n      checked: !selected.checked,\n    };\n\n    this.setState({\n      todos: nextTodos\n    });\n  }\n\n  //delete\n  handleRemove = (id) => {\n    const { todos }= this.state;\n    this.setState({\n      //parameter로 받아온 id를 가지고 있지 않은 배열을 새로 생성  \n      // => 결과적으로는 받아온 id 하나만 지워지고 나머지는 그대로인 배열이 생기겠지?? == 삭제!\n      todos: todos.filter(todo => todo.id !==id )\n    });\n  }\n\n  //색깔 바꾸기\n  handleSelectColor = (color) => {\n      this.setState({\n        color\n      })\n  }\n\n\n  render() {\n    const {input, todos, color} = this.state;\n    // 비구조화 할당\n    // : 이렇게 하면 this.handleCreate 처럼 계속 this 안붙여도 됨!\n    const {handleChange, handleCreate, handleKeyPress, handleRemove, handleToggle, handleSelectColor} = this;\n    return (\n      <TodoListTemplate form={(<Form \n                                value={input}\n                                onKeyPress= {handleKeyPress}\n                                onChange={handleChange}\n                                onCreate={handleCreate}\n                                color = {color}\n                                  />\n      )}\n      palette = {( \n      <Palette colors = {colors} selected = {color} onSelect= {handleSelectColor}/> \n      )}>\n\n        <TodoItemList todos ={todos} onToggle={handleToggle}\n                                     onRemove={handleRemove}/>\n      </TodoListTemplate>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}